name: pipelene
on:
  push:
    branches:
    - feat-pipeline
jobs:
  SAST:
    runs-on: ubuntu-latest #node:19-alpine3.15
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '19'

    - name: build
      run: |
        npm install

    - name: Validando existencia de proyecto en SonarCloud
      id: validateProjectOnSonar
      run: |
        #pwd
        #ls -R
        set +e
        curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=${{ github.event.repository.name }}' -d 'organization=claudiocorrear' -d 'visibility=public'
        if [ $? -ne 0 ]; then
          echo "Proyecto ya existe en Sonarcloud"
          echo "project_created=false" >> $GITHUB_ENV
        else
          echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en Sonarcloud"
          
          echo "Se establece rama feat-pipeline como rama por defecto"
          curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=feat-pipeline' -d 'project=${{ github.event.repository.name }}'
          echo "project_created=true" >> $GITHUB_ENV
        fi
        set -e

    - name: Enable execution gradlew
      run: | 
        chmod 777 gradlew

    - name: Perform Initial Analysis (if Project Created)
      if: env.project_created == 'true'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Realizando análisis inicial en la rama feat-pipeline..."
        ./gradlew sonarqube \
          -Dsonar.projectKey=$REPO_NAME \
          -Dsonar.organization=claudiocorrear \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=$SONAR_TOKEN \
          -Dsonar.branch.name=feat-pipeline

    - name: Perform Branch Analysis
      if: env.project_created == 'false'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        echo "Realizando análisis en la rama actual: $BRANCH_NAME..."
        ./gradlew sonarqube \
          -Dsonar.projectKey=$REPO_NAME \
          -Dsonar.organization=claudiocorrear \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=$SONAR_TOKEN \
          -Dsonar.branch.name=$BRANCH_NAME

    - name: Validate Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Validando el estado del Quality Gate..."
        analysisId=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

        qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

        if [ "$qualityGateStatus" != "OK" ]; then
          echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
          echo "Verificando vulnerabilidades críticas..."
          vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

          if [ "$vulnerabilities" -gt 0 ]; then
            echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
            #exit 1
          fi
        else
          echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."
        fi

