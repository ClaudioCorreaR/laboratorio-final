name: pipeline

on:
  push:
    branches:
      - main

env:
  PROJECT_NAME: "laboratorio-final-claudiocorrear"

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Install dependencies
        run: npm install

      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
          echo $PROJECT_NAME
          set +e
          echo "Verificando si el proyecto ya existe en SonarCloud..."
          PROJECT_EXISTS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/projects/search?organization=claudiocorrear&projects=$PROJECT_NAME" | jq -r '.paging.total')
          echo PROJECT_EXISTS: $PROJECT_EXISTS
          if [ "$PROJECT_EXISTS" -eq 0 ]; then
            echo "El proyecto no existe. Creándolo en SonarCloud..."
            curl -f -X POST -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/projects/create" \
              --data-urlencode "name=$PROJECT_NAME" \
              --data-urlencode "project=$PROJECT_NAME" \
              --data-urlencode "organization=claudiocorrear" \
              --data-urlencode "visibility=public"
      
            if [ $? -ne 0 ]; then
              echo "Error al crear el proyecto en SonarCloud."
              exit 1
            fi
      
            echo "Estableciendo rama 'main' como rama por defecto..."
            curl -X POST -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/project_branches/rename" \
              --data-urlencode "name=main" \
              --data-urlencode "project=$PROJECT_NAME"
            echo "project_created=true" >> $GITHUB_ENV
          else
            echo "El proyecto ya existe en SonarCloud."
            echo "project_created=false" >> $GITHUB_ENV
          fi
          set -e
      - name: Perform Initial Analysis (if Project Created)
        if: env.project_created == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Realizando análisis inicial en la rama main..."
          npx sonarqube-scanner \
            -Dsonar.projectKey=$PROJECT_NAME \
            -Dsonar.organization=claudiocorrear \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=main \
            -Dsonar.sources=.

      - name: Perform Branch Analysis
        if: env.project_created == 'false'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo ${{ github.ref_name }}
          echo "Realizando análisis en la rama actual: $BRANCH_NAME..."
          npx sonarqube-scanner \
            -Dsonar.projectKey=$PROJECT_NAME \
            -Dsonar.organization=claudiocorrear \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=$BRANCH_NAME \
            -Dsonar.sources=.

      - name: Validate Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Validando el estado del Quality Gate..."
          vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "Se encontraron $vulnerabilities vulnerabilidades críticas, altas o medias. El proyecto no cumple con los estándares de seguridad."
            exit 1
          fi

  SCA:
    needs: SAST
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Install dependencies
        run: npm install

      - name: Verify Node Modules
        run: ls -la ./node_modules

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: "${{ env.PROJECT_NAME }}"
          path: '.'
          format: 'ALL'
          args: >
            --out ./reports
            --failOnCVSS 1
            --enableRetired

      - name: Upload Test Result
        uses: actions/upload-artifact@master
        with:
          name: Depcheck Report
          path: ./reports

  DockerBuild:
    needs: SCA
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: |
          docker build --tag claudiocorrea/laboratorio-final:latest .

      - name: Push Docker
        run: |
          docker push claudiocorrea/laboratorio-final:latest

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-24.04
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker
        run: |
          docker pull claudiocorrea/laboratorio-final:latest

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'claudiocorrea/laboratorio-final:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: 1
